def sqlite3.dbapi2.Connection.execute(self, sql: TaintSink[DBinput], parameters= ...): ...
def sqlite3.dbapi2.Cursor.executemany(self, sql: TaintSink[DBinput], seq_of_parameters): ...
def sqlite3.dbapi2.Cursor.executescript(self, sql_script: TaintSink[DBinput]): ...
def sqlite3.dbapi2.Connection.execute(self, sql: TaintSink[DBinput], parameters): ...
def sqlite3.dbapi2.Connection.executemany(self, sql: TaintSink[DBinput], seq_of_parameters): ...
def sqlite3.dbapi2.Connection.executescript(self, sql_script: TaintSink[DBinput]): ...
def pymysql.cursors.Cursor.execute(self, query: TaintSink[DBinput], args = ...): ...
def pymysql.cursors.Cursor.executemany(self, query: TaintSink[DBinput], args): ...

def redis.client.Redis.set(self,name,value: TaintSink[DBinput],ex= ...,px= ...,nx= ...,xx= ...): ...
def slackclient.client.SlackClient.api_call(self, method, timeout = ..., **kwargs) -> TaintSource[APIcall]:...

class email.mime.text.MIMEText(TaintSource[EmailMsg]):...
class email.mime.multipart.MIMEMultipart(TaintSource[EmailMsg]):...
def smtplib.SMTP.sendmail(self, from_addr, to_addrs, msg: TaintSink[EmailSent], mail_options= ..., rcpt_options=... ): ...

def redis.client.Redis.hset(self, name, key, value: TaintSink[DBinput]): ...
def redis.client.Redis.hsetnx(self, name, key, value:  TaintSink[DBinput]): ...
def redis.client.Redis.lset(self, name, index, value: TaintSink[DBinput]): ...
def redis.client.Redis.setnx(self, name, value: TaintSink[DBinput]): ...

django.http.request.HttpRequest.POST: TaintSource[POST] = ...
django.http.request.HttpRequest.REQUEST: TaintSource[POST] = ...
django.http.request.HttpRequest.GET: TaintSource[GET] = ...
def django.db.backends.utils.CursorWrapper.execute(self, sql: TaintSink[DBinput], params=...): ...
def django.db.backends.utils.CursorWrapper.executemany(self, sql: TaintSink[DBinput], param_list): ...
def django.db.backends.mysql.base.CursorWrapper.execute(self, query: TaintSink[DBinput], args=...): ...
def django.db.backends.mysql.base.CursorWrapper.executemany(self, query: TaintSink[DBinput], args): ...
def django.core.mail.send_mail( subject: TaintSink[EmailSent], message: TaintSink[EmailSent], from_email, recipient_list,
fail_silently=..., auth_user=..., auth_password=..., connection=..., html_message: TaintSink[EmailSent]=...): ...

def logging.Logger.debug(self, msg: TaintSink[Logging], *args: TaintSink[Logging], exc_info: TaintSink[Logging],
stack_info: TaintSink[Logging], extra: TaintSink[Logging], **kwargs: TaintSink[Logging]): ...

def logging.Logger.info( self, msg: TaintSink[Logging], *args: TaintSink[Logging], exc_info: TaintSink[Logging],
stack_info: TaintSink[Logging], extra: TaintSink[Logging], **kwargs: TaintSink[Logging]): ...
